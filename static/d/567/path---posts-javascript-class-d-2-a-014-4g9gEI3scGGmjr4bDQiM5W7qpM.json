{"data":{"site":{"siteMetadata":{"author":{"name":"한승훈","contacts":{"twitter":"#"}},"disqusShortname":"","subtitle":"프론트엔드 개발 기술 블로그","title":"Dosanhoon's blog","url":"https://dosanhoon.github.io/"}},"markdownRemark":{"id":"02651345-d913-5157-832c-10835ab43f00","html":"<h1>Class &#x26; Module</h1>\n<h2>Class</h2>\n<h3>9.2 생성자와 prototype</h3>\n<ul>\n<li>class 객체는 생성자로 구분 되지 않는다.</li>\n<li>객체는 prototype 으로 구분 된다.</li>\n<li>하지만 동일한 prototype일 경우 동일한 prototype.constructor 프로퍼티를 상속 받는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">생성자1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token string\">\"생성자1 프로퍼티\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n생성자<span class=\"token number\">1.</span>prototype<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token string\">\"생성자1 프로토타입\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">생성자2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token string\">\"생성자2 프로퍼티\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n생성자<span class=\"token number\">2.</span>prototype <span class=\"token operator\">=</span> 생성자<span class=\"token number\">1.</span>prototype<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> 클래스<span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">생성자1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> 클래스<span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">생성자2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n클래스<span class=\"token number\">1</span> <span class=\"token keyword\">instanceof</span> 생성자<span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n\n클래스<span class=\"token number\">2</span> <span class=\"token keyword\">instanceof</span> 생성자<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n\n<span class=\"token punctuation\">(</span>클래스<span class=\"token number\">1.</span>constructor <span class=\"token operator\">==</span> 클래스<span class=\"token number\">2.</span>constructor<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> 생성자<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//?</span></code></pre></div>\n<h3>9.3 자바 스타일 클래스</h3>\n<ul>\n<li>\n<p>생성자 객체</p>\n<ul>\n<li>클래스를 정의 하는 함수 객체</li>\n<li>생성자의 프로퍼티는 클래스 필드와 클래스 메서드</li>\n</ul>\n</li>\n<li>\n<p>프로포타입 객체</p>\n<ul>\n<li>프로퍼티를 인스턴스 객체에 상속</li>\n<li>프로퍼티가 함수일 경우 인스턴스 메서드</li>\n</ul>\n</li>\n<li>\n<p>인스턴스 객체</p>\n<ul>\n<li>생성자를 통해 프로토타입을 상속 받은 객체</li>\n<li>프로퍼티는 인스턴스 필드</li>\n</ul>\n</li>\n<li>\n<p>자바 등 클래스 지원 언어의 멤버 유형을 관용적으로 자바스크립트에서 구현하는 방법</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//name 은 인스턴스 필드</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nPerson<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\nPerson<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getGender</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nPerson<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setGender</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//prototype의 프로퍼티 gender는 prototype의 프로퍼티</span>\n<span class=\"token comment\">//prototype의 프로퍼티 함수는 인스턴스 메소드 책에서는 상속이라고 하지만 참조가 더 맞는 표현인듯</span>\n\nPerson<span class=\"token punctuation\">.</span><span class=\"token constant\">MAN</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"man\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//클래스 필드</span>\nPerson<span class=\"token punctuation\">.</span><span class=\"token constant\">WOMAN</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"woman\"</span><span class=\"token punctuation\">;</span>\nPerson<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">WTF</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//클래스 메소드</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span><span class=\"token constant\">MAN</span> <span class=\"token operator\">+</span> Person<span class=\"token punctuation\">.</span><span class=\"token constant\">WOMAN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//클래스 멤버는 인스턴스에 상속 되지 않는다.</span>\n<span class=\"token comment\">//인스턴스.constructor 를 통해 접근 가능</span></code></pre></div>\n<h3>9.4 클래스 확장하기</h3>\n<ul>\n<li>인스턴스가 생성된 이후에도 prototype 통해서 클래스 확장이 가능하다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nundefined<span class=\"token punctuation\">;</span>\nn<span class=\"token punctuation\">.</span><span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nNumber<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">times</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>9.5 클래스 자료형</h3>\n<ul>\n<li>classof ㄴㄴ</li>\n<li>class 타입에 대한 검사</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javasciprt\"><pre class=\"language-javasciprt\"><code class=\"language-javasciprt\"> isPrototypeOf()\n instanceof</code></pre></div>\n<h3>Duck typing</h3>\n<ul>\n<li>인스턴스의 클래스 타입인지 검사하기 위해 인스턴스의 특성을 검사하여 클래스는 유추하는 방식</li>\n</ul>","fields":{"tagSlugs":["/tag/javascript/","/tag/class/"]},"frontmatter":{"date":"2019-01-01T23:46:37.121Z","description":"Javascript Class 에 대한 이해","tags":["javascript","class"],"title":"Javascript Class 에 대한 이해"}}},"pageContext":{"slug":"/posts/javascript-class"}}