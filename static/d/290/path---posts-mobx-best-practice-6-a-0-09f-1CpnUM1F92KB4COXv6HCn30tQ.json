{"data":{"site":{"siteMetadata":{"author":{"name":"한승훈","contacts":{"twitter":"#"}},"disqusShortname":"","subtitle":"프론트엔드 개발 기술 블로그","title":"Dosanhoon's blog","url":"https://dosanhoon.github.io/"}},"markdownRemark":{"id":"b4b190cc-375a-54da-a527-2464a9a66c70","html":"<h1>Mobx Best Pratice</h1>\n<p><a href=\"https://iconof.com/best-practices-for-mobx-with-react/\">원문</a></p>\n<p>위 포스트에 대한 간략한 요약입니다.\n시간이 되면 전체글을 번역해도 좋을것 같네요</p>\n<h1>1. 최대한 스토어 내에서 처리</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    // Processing observable arrays to get derived values\n    store.array.forEach()\n    store.array.reduce()\n    store.array.filter()\n    store.array.find()\n\n    // Checking array length\n    if (store.array.length &gt; 0) {\n      ...\n    }\n\n    // Combining values\n    const fullname = store.firstname + store.lastname</code></pre></div>\n<ul>\n<li>스토어 내부 데이터를 UI 에서 가공할 필요가 있을 경우 스토어 내부에서 처리 하는 것 권장</li>\n<li>@computed 사용</li>\n<li>store.array.length > 0 등 array 존재 여부 체크 필요 시 isEmpty 등 정의해서 사용</li>\n<li>UI 에서 이상 처리 하지 않고 사용할 수 있어야 한다</li>\n</ul>\n<h1>2. 엄격 모드 사용</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    // mutate directly\n    store.valueA = 5;\n    store.valueB = 10;\n\n    // mutate in an action\n    action() {\n      this.valueA = 5;\n      this.valueB = 10;\n    }</code></pre></div>\n<ul>\n<li>스토어 내부 데이터 변경시 @action 사용 권장</li>\n<li>가독성 및 성능 향상</li>\n</ul>\n<h1>3. Store 사용시</h1>\n<ul>\n<li>import 대신 inject 해서 사용하는 방법으로 해야 된다.</li>\n</ul>","fields":{"tagSlugs":["/tag/javascript/","/tag/react/","/tag/mobx/"]},"frontmatter":{"date":"2019-07-16T23:46:37.121Z","description":"mobx best pratice","tags":["javascript","react","mobx"],"title":"Mobx best pratice"}}},"pageContext":{"slug":"/posts/mobx-best-practice"}}